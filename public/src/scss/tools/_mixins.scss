// =======================
// Tools/Mixins
// Thanks to @sutterlity
// https://github.com/sutter/POPY-Starter-integration-web/blob/master/scss/tools/_mixins.scss
// =======================

// -----------------------
// == Base
// -----------------------

// = Inline-block
// -----------------------------
@mixin inline-block ($haslayout : true){
  display: inline-block;
  vertical-align: middle;
  @if $haslayout == true {
    .lt-ie8 & {
      display: inline;
      zoom: 1;
    }
  }
}

// = Clearfix
// -----------------------------
@mixin clearfix ($haslayout : true) {
  @if $haslayout == true {
    .lt-ie8 & {
      zoom: 1;
    }
  }
  &:before, &:after {
    content: "";
    display: table;
  }
  &:after {
    clear: both
  }
}

// = Opacity
// -----------------------------
@mixin opacity($opacity) {
    filter: unquote("progid:DXImageTransform.Microsoft.Alpha(Opacity=#{round($opacity * 100)})");
    opacity: $opacity;

    /* Hack IE6 */
    .lt-ie7 & {
        filter : alpha(opacity=#{round($opacity * 100)});
        zoom: 1;
    }
}

// = Placeholder
// -----------------------------
@mixin placeholder($color : $clr-mixin-placeholder) {
  &::-webkit-input-placeholder {
    color: $color;
  }
  &:-moz-placeholder {
    color: $color;
  }
  &:-ms-input-placeholder {
    color: $color;
  }
}

// = Selection
// -----------------------------
$prefixes: ("-webkit-","-moz-", "");
@mixin selection($color, $background) {
  @each $prefix in $prefixes {
    ::#{$prefix}selection {
      color: $color;
      background: $background;
      text-shadow:none;
    }
  }
}

// = Position
// -----------------------------
@mixin position ($position: relative, $coordinates: 0 0 0 0) {
  @if type-of($position) == list {
    $coordinates: $position;
    $position: relative;
  }
  $top: nth($coordinates, 1);
  $right: nth($coordinates, 2);
  $bottom: nth($coordinates, 3);
  $left: nth($coordinates, 4);
  position: $position;
  @if $top == auto {
    top: $top;
  }
  @else if not(unitless($top)) {
    top: $top;
  }
  @if $right == auto {
    right: $right;
  }
  @else if not(unitless($right)) {
    right: $right;
  }
  @if $bottom == auto {
    bottom: $bottom;
  }
  @else if not(unitless($bottom)) {
    bottom: $bottom;
  }
  @if $left == auto {
    left: $left;
  }
  @else if not(unitless($left)) {
    left: $left;
  }
}

// ----------------------------------------------------------
// == CSS3
// ----------------------------------------------------------

// = Filter
// -----------------------------
@mixin filter (
  $filter-1,
  $filter-2 : false,
  $filter-3 : false,
  $filter-4 : false,
  $filter-5 : false,
  $filter-6 : false,
  $filter-7 : false,
  $filter-8 : false,
  $filter-9 : false,
  $filter-10: false
  ) {
  $filter : compact($filter-1, $filter-2, $filter-3, $filter-4, $filter-5, $filter-6, $filter-7, $filter-8, $filter-9, $filter-10);
  @include prefixer(filter, $filter, webkit moz spec);
}

// = UL
// -----------------------------
@mixin ul-list-inline() {
    list-style: none;
    margin: 0;
    padding: 0;

    li {
        @include inline-block();
    }
}

@mixin reset-ul() {
    list-style: none;
    margin: 0;
    padding: 0;
}


// = Transform
// -----------------------------
@mixin transform($property: none) {
    @include prefixer(transform, $property, webkit moz ms o spec);
}

@mixin transform-origin($axes: 50%) {
    @include prefixer(transform-origin, $axes, webkit moz ms o spec);
}

@mixin transform-style ($style: flat) {
    @include prefixer(transform-style, $style, webkit moz ms o spec);
}

// = Keyframes
// -----------------------------
@mixin keyframes($name) {
    $original-prefix-for-webkit:    $prefix-for-webkit;
    $original-prefix-for-mozilla:   $prefix-for-mozilla;
    $original-prefix-for-microsoft: $prefix-for-microsoft;
    $original-prefix-for-opera:     $prefix-for-opera;
    $original-prefix-for-spec:      $prefix-for-spec;

    @if $original-prefix-for-webkit {
        @include disable-prefix-for-all();
        $prefix-for-webkit: true;
        @-webkit-keyframes #{$name} {
            @content;
        }
    }
    @if $original-prefix-for-mozilla {
        @include disable-prefix-for-all();
        $prefix-for-mozilla: true;
        @-moz-keyframes #{$name} {
            @content;
        }
    }
    @if $original-prefix-for-spec {
        @include disable-prefix-for-all();
        $prefix-for-spec: true;
        @keyframes #{$name} {
            @content;
        }
    }

    $prefix-for-webkit:    $original-prefix-for-webkit   ;
    $prefix-for-mozilla:   $original-prefix-for-mozilla  ;
    $prefix-for-microsoft: $original-prefix-for-microsoft;
    $prefix-for-opera:     $original-prefix-for-opera    ;
    $prefix-for-spec:      $original-prefix-for-spec     ;
}

// = Calc
// -----------------------------
@mixin calc($property, $expression) {
  #{$property}: calc(#{$expression});
}

// = Vertical Center
// -----------------------------
@mixin vertical-center {
  position: relative;
  top: 50%;
  transform: translateY(-50%);
}

//As the translation is in percentage the result could seem blurry. 
//To fix this we apply a preserve-3d on the parent element.
// .parent-element {
//    transform-style: preserve-3d;
// }

//Flexbox vertical Centering (apply this class on the parent element of your targeted children)
@mixin flex-vertical-center {
  display: flex;
  align-items: center;
}


// = Vertical & Horizontal Center 
// -----------------------------
@mixin absolute-center {
  position: absolute;
  margin: auto;
  top: 0; right: 0; bottom: 0; left: 0;
}


// = Fluid Image IE 
// ----------------
@mixin scale-image-ie($image) {
  background: none;
  filter: progid:DXImageTransform.Microsoft.AlphaImageLoader(
    src="#{image_url($image, true, false)}",
    sizingMethod="scale"
  );
}

// = Background Size 
// -----------------
@mixin background-size($height, $width) {
  background-size: $width $height;
}

// = Retinize Images 
// -----------------
@mixin retinize($file, $type, $height, $width) {
  background-image: url('../img/' + $file + '.' + $type);

  @media #{$is-hdpi} {
    & {
      background-image: url('../img/' + $file + '-2x' + $type);
      @include background-size ($width, $height);
    }
  }
}

// = Media Queries
// -----------------
// $tablet-width: 768px;
// $desktop-width: 1024px;

// @mixin tablet {
//   @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {
//     @content;
//   }
// }

// @mixin desktop {
//   @media (min-width: #{$desktop-width}) {
//     @content;
//   }
// }

// Utilisation Exemple
// p {
//   font-size: 16px;

//   @include tablet {
//     font-size: 18px;
//   }

//   @include desktop {
//     font-size: 20px;
//   }
// }

$mobile: 320px;
$desktop: 1024px;

@mixin respond-to($media) {
  // @if $media == handhelds {
  //   @media only screen and (max-width: $mobile) { @content; }
  // }
  @if $media == tablet {
    @media only screen and (min-width: $mobile + 1) and (max-width: $desktop - 1) { @content; }
  }
  @else if $media == desktop {
    @media only screen and (min-width: $desktop) { @content; }
  }
}

// Exemple utilisation
// .profile-pic {
//   float: left;
//   width: 250px;
//   @include respond-to(tablet) { width: 125px; }
//   @include respond-to(desktop) { float: none; }
// }

// = Retina Media Query
// --------------------
@mixin retina {
  @media
    only screen and (-webkit-min-device-pixel-ratio: 2),
    only screen and (min--moz-device-pixel-ratio: 2),
    only screen and (-o-min-device-pixel-ratio: 2/1),
    only screen and (min-device-pixel-ratio: 2),
    only screen and (min-resolution: 192dpi),
    only screen and (min-resolution: 2dppx) {
    @content;
  }
}

// = Print Media Query
// -------------------
@mixin print {
  @media print {
    @content;
  }
}



//Add Icon
@mixin add-icon($color) {
  position: relative;
  display: block;
  width: 2rem;
  height: 2rem;
  transition: all ease .3s;

  &:before, &:after {
    content: '';
    position: absolute;
    display: block;
    width: 10%;
    height: 50%;
    background-color: $color;
    border-radius: 2rem;
  }

  &:before {
    @include absolute-center();
  }

  &:after {
    transform: rotate(90deg);
    @include absolute-center();
  }
}

//Delete Icon
@mixin delete-icon($color) {
  transform: rotate(45deg);
  @include add-icon($color);
}

//Subtle Separator
@mixin subtle-sep($dir, $width, $color) {
  $gradient: left;
  position: relative;
  &:before {
    position: absolute;
    content: "";
    #{$dir}: 0;
    @if $dir == bottom or $dir == top {
      display: block;
      height: $width;
      width: 100%;
      left: 0;
    } @else {
      top: 0;
      width: $width;
      height: 100%;
      $gradient: top;
    }
    background: linear-gradient($gradient, transparent, $color, transparent);
  }
}

//Example
// li + li {
//   @include subtle-sep(top, 1px, rgba(black, 0.2)); //Or bottom or left
//   // simulates border-top: 1px solid rgba(black, 0.2); 
// }








